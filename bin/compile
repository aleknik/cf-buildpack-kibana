#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir>
BP=$(dirname $(dirname $0))
source $BP/bin/functions.sh

if [[ -z "${1:-}" ]]; then
  err "Missing argument <build-dir>"
fi
BUILDDIR=$(cd "${1:-}/" && pwd)

if [[ -z "${2:-}" ]]; then
  err "Missing argument <cache-dir>"
fi
CACHEDIR=$(cd "${2:-}" && pwd)

if [[ ! -f "${BUILDDIR}/Kibana" ]]; then
  err "${BUILDDIR}/Kibana not found."
fi

source ${BUILDDIR}/Kibana

# Default Values
KIBANA_CMD_ARGS=${KIBANA_CMD_ARGS:-""}
KIBANA_PLUGINS=${KIBANA_PLUGINS:-""}
KIBANA_PLUGINS_URL=${KIBANA_PLUGINS_URL:-""}
KIBANA_VERSION=${KIBANA_VERSION:-$(cat ${BP}/VERSION)}
KIBANA_FILE=${KIBANA_FILE:-"kibana-${KIBANA_VERSION}.tar.gz"}
KIBANA_URL=${KIBANA_URL:-"https://download.elastic.co/kibana/kibana/${KIBANA_FILE}"}
SHA1_EXT=${SHA1_EXT:-".sha1.txt"}

# Helper tools
DOCKERIZE_VERSION=${DOCKERIZE_VERSION:-"v0.3.0"}
DOCKERIZE_URL=${DOCKERIZE_URL:-"https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz"}
JQ_URL=${JQ_URL:-"https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64"}

mkdir -p ${BUILDDIR}/bin

if [[ ! -f ${BUILDDIR}/bin/dockerize ]]; then
  start "Installing dockerize"
  cd ${BUILDDIR}/bin
  ${CURL} ${DOCKERIZE_URL} | tar zxf -
  finished
  step "downloaded ${DOCKERIZE_URL}"
fi

# Install jq
if [[ ! -f ${BUILDDIR}/bin/jq ]]; then
  start "Installing jq"
  ${CURL} -o ${BUILDDIR}/bin/jq ${JQ_URL}
  chmod +x ${BUILDDIR}/bin/jq
  finished
  step "Downloaded ${JQ_URL}"
fi

if [[ ! -d ${BUILDDIR}/kibana-${KIBANA_VERSION} ]]; then
  start "Installing Kibana ${KIBANA_VERSION}"
  ${CURL} -o "${CACHEDIR}/${KIBANA_FILE}" "${KIBANA_URL}"

  cd ${CACHEDIR}

  tar -zx -C ${BUILDDIR} -f ${CACHEDIR}/${KIBANA_FILE}
  finished
  step "downloaded ${KIBANA_URL}"
fi

# Install Kibana Plugins
if [[ -n ${KIBANA_PLUGINS:-""} ]]; then
  step "Installing Kibana Plugins"
  for PLUGIN in "${KIBANA_PLUGINS[@]}"; do
    start "Installing Kibana Plugin ${PLUGIN}"
    ${BUILDDIR}/kibana-${KIBANA_VERSION}/bin/kibana plugin -i ${PLUGIN} | indent
    finished
  done
fi

# Install Kibana Plugins from URL
if [[ -n ${KIBANA_PLUGINS_URL:-""} ]]; then
  step "Installing Kibana Plugins from URL"
  I=1
  for PLUGIN in "${KIBANA_PLUGINS_URL[@]}"; do
    start "Installing Kibana Plugin from URL: ${PLUGIN}"
    ${BUILDDIR}/kibana-${KIBANA_VERSION}/bin/kibana plugin -i url_plugin_$I -u ${PLUGIN} | indent
    finished
    I=$((I+1))
  done
fi

# memory limit for nodejs gc (--max_old_space_size)
KIBANA_MEMORY_LIMIT="${KIBANA_MEMORY_LIMIT:-$(echo ${VCAP_APPLICATION} | ${BUILDDIR}/bin/jq '.limits.mem * .75 | floor')}"

step "Create buildpack-release-step.yml"
cat << EOF >> ${BUILDDIR}/buildpack-release-step.yml
---
default_process_types:
  web: bin/dockerize -template kibana.yml:kibana.yml /bin/bash -c bin/run.sh
EOF

step "Create bin/run.sh"
mkdir -p ${BUILDDIR}/.profile.d
echo 'PATH=${PATH}:${HOME}/bin' > ${BUILDDIR}/.profile.d/run.sh
cat << EOF >> ${BUILDDIR}/bin/run.sh
#!/bin/bash
export NODE_OPTIONS=--max_old_space_size=${KIBANA_MEMORY_LIMIT}
\${HOME}/kibana-${KIBANA_VERSION}/bin/kibana -c kibana.yml
EOF

chmod +x ${BUILDDIR}/bin/*.sh

step "Buildpack compile finished"
